/*! v2.2.1-beta */
"use strict";export class DroppyContext{instances=[];hideAll(){for(const t of this.instances)t.drop.checkVisibility()&&t.hide()}showAll(){for(const t of this.instances)t.drop.checkVisibility()||t.show()}}export const clickAwayContext=new DroppyContext;document.addEventListener("click",(t=>{for(const e of clickAwayContext.instances)e.drop.checkVisibility()&&e.options.clickAwayToClose&&!e.trigger.contains(t.target)&&!e.drop.contains(t.target)&&e.toggle()}));const droppyOptions={animationIn:"",animationOut:"",display:"block",triggerActiveClass:"active",preventDefault:!1,clickAwayToClose:!0};export default class Droppy{trigger;drop;options;context;constructor(t,e,i={},o=new DroppyContext){this.trigger=t,this.trigger.addEventListener("click",(()=>this.toggle())),this.drop=e,this.options={...droppyOptions,...i},this.context=o,this.context.instances.push(this),this.options.clickAwayToClose&&clickAwayContext.instances.push(this)}show(){this.options.preventDefault&&event.preventDefault();const t=new Promise((t=>{this.drop.addEventListener("animationend",t)})).then((()=>{this.options.animationIn&&this.drop.classList.remove(this.options.animationIn)}));return this.options.animationIn?this.drop.classList.add(this.options.animationIn):this.drop.dispatchEvent(new Event("animationend")),this.options.triggerActiveClass&&this.trigger.classList.add(this.options.triggerActiveClass),this.drop.style.display=this.options.display,t}hide(){this.options.preventDefault&&event.preventDefault();const t=new Promise((t=>{this.drop.addEventListener("animationend",t)})).then((()=>{this.drop.style.display="none",this.options.animationOut&&this.drop.classList.remove(this.options.animationOut)}));return this.options.animationOut?this.drop.classList.add(this.options.animationOut):this.drop.dispatchEvent(new Event("animationend")),this.options.triggerActiveClass&&this.trigger.classList.remove(this.options.triggerActiveClass),t}async toggle(){const t=new CustomEvent("beforetoggle",{bubbles:!0,cancelable:!0,detail:{droppy:this}});if(this.drop.dispatchEvent(t),t.defaultPrevented)return;this.drop.checkVisibility()?await this.hide():await this.show();const e=new CustomEvent("toggle",{bubbles:!0,cancelable:!0,detail:{droppy:this}});this.drop.dispatchEvent(e)}}const generatorOptions={wrapper:"li",trigger:"a",drop:"ul",...droppyOptions};export function menuGenerator(t,e,i=new DroppyContext){e={...generatorOptions,...e};const o=t.querySelectorAll(e.wrapper);for(const t of o){const o=t.querySelector(e.trigger),s=t.querySelector(e.drop);o&&s&&new Droppy(o,s,e,i)}return i}document.querySelectorAll("[data-menu]").forEach((t=>menuGenerator(t,JSON.parse(t.dataset.menu||"{}"))));export function tabsGenerator(t,e,i=new DroppyContext){e={...droppyOptions,...e},t.addEventListener("beforetoggle",(t=>{const e=t.detail.droppy;e.drop.checkVisibility()?t.preventDefault():e.context.hideAll()}));const o=t.querySelectorAll("[data-target]");for(const s of o){const o=t.querySelector(s.dataset.target);o&&new Droppy(s,o,e,i)}return i}document.querySelectorAll("[data-tabs]").forEach((t=>tabsGenerator(t,JSON.parse(t.dataset.tabs||"{}"))));